// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System;

namespace AccountManagement.Infrastructure.EFCore.Migrations;

[DbContext(typeof(AccountDbContext))]
internal partial class AccountDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasAnnotation("Relational:MaxIdentifierLength", 128)
            .HasAnnotation("ProductVersion", "5.0.17")
            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

        modelBuilder.Entity("AccountManagement.Domain.AccountAggregate.Account", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreationDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Fullname")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("Mobile")
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnType("nvarchar(30)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<string>("ProfilePhoto")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<long>("RoleId")
                    .HasColumnType("bigint");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("Accounts");
            });

        modelBuilder.Entity("AccountManagement.Domain.RoleAggregate.Role", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("CreationDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("Id");

                b.ToTable("Roles");
            });

        modelBuilder.Entity("AccountManagement.Domain.AccountAggregate.Account", b =>
            {
                b.HasOne("AccountManagement.Domain.RoleAggregate.Role", "Role")
                    .WithMany("Accounts")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Role");
            });

        modelBuilder.Entity("AccountManagement.Domain.RoleAggregate.Role", b =>
            {
                b.OwnsMany("AccountManagement.Domain.RoleAggregate.Permission", "Permissions", b1 =>
                    {
                        b1.Property<long>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnType("bigint")
                            .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                        b1.Property<int>("Code")
                            .HasColumnType("int");

                        b1.Property<long>("RoleId")
                            .HasColumnType("bigint");

                        b1.HasKey("Id");

                        b1.HasIndex("RoleId");

                        b1.ToTable("RolePermissions");

                        b1.WithOwner("Role")
                            .HasForeignKey("RoleId");

                        b1.Navigation("Role");
                    });

                b.Navigation("Permissions");
            });

        modelBuilder.Entity("AccountManagement.Domain.RoleAggregate.Role", b => b.Navigation("Accounts"));
    }
}
